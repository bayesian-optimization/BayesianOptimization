{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimizing over non-float Parameters\n",
    "\n",
    "Sometimes, you need to optimize a target that is not just a function of floating-point values, but relies on integer or categorical parameters. This notebook shows how such problems are handled by following an approach from [\"Dealing with categorical and integer-valued variables in Bayesian Optimization with Gaussian processes\" by Garrido-Merchán and Hernández-Lobato](https://arxiv.org/abs/1805.03463). One simple way of handling an integer-valued parameter is to run the optimization as normal, but then round to the nearest integer after a point has been suggested. This method is similar, except that the rounding is performed in the _kernel_. Why does this matter? It means that the kernel is aware that two parameters, that map the to same point but are potentially distinct before this transformation are the same."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from bayes_opt import BayesianOptimization\n",
    "from bayes_opt import acquisition\n",
    "\n",
    "from sklearn.gaussian_process.kernels import Matern\n",
    "\n",
    "# suppress warnings about this being an experimental feature\n",
    "warnings.filterwarnings(action=\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Simple integer-valued function\n",
    "Let's look at a simple, one-dimensional, integer-valued target function and compare a typed optimizer and a continuous optimizer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def target_function_1d(x):\n",
    "    return np.sin(np.round(x)) - np.abs(np.round(x) / 5)\n",
    "\n",
    "c_pbounds = {'x': (-10, 10)}\n",
    "bo_cont = BayesianOptimization(target_function_1d, c_pbounds, verbose=0, random_state=1)\n",
    "\n",
    "# one way of constructing an integer-valued parameter is to add a third element to the tuple\n",
    "d_pbounds = {'x': (-10, 10, int)}\n",
    "bo_disc = BayesianOptimization(target_function_1d, d_pbounds, verbose=0, random_state=1)\n",
    "\n",
    "fig, axs = plt.subplots(2, 1, figsize=(10, 6), sharex=True, sharey=True)\n",
    "\n",
    "bo_cont.maximize(init_points=2, n_iter=10)\n",
    "bo_cont.acquisition_function._fit_gp(bo_cont._gp, bo_cont.space)\n",
    "\n",
    "y_mean, y_std = bo_cont._gp.predict(np.linspace(-10, 10, 1000).reshape(-1, 1), return_std=True)\n",
    "axs[0].set_title('Continuous')\n",
    "axs[0].plot(np.linspace(-10, 10, 1000), target_function_1d(np.linspace(-10, 10, 1000)), 'k--', label='True function')\n",
    "axs[0].plot(np.linspace(-10, 10, 1000), y_mean, label='Predicted mean')\n",
    "axs[0].fill_between(np.linspace(-10, 10, 1000), y_mean - y_std, y_mean + y_std, alpha=0.3, label='Predicted std')\n",
    "axs[0].plot(bo_cont.space.params, bo_cont.space.target, 'ro')\n",
    "\n",
    "bo_disc.maximize(init_points=2, n_iter=10)\n",
    "bo_disc.acquisition_function._fit_gp(bo_disc._gp, bo_disc.space)\n",
    "\n",
    "y_mean, y_std = bo_disc._gp.predict(np.linspace(-10, 10, 1000).reshape(-1, 1), return_std=True)\n",
    "axs[1].set_title('Discrete')\n",
    "axs[1].plot(np.linspace(-10, 10, 1000), target_function_1d(np.linspace(-10, 10, 1000)), 'k--', label='True function')\n",
    "axs[1].plot(np.linspace(-10, 10, 1000), y_mean, label='Predicted mean')\n",
    "axs[1].fill_between(np.linspace(-10, 10, 1000), y_mean - y_std, y_mean + y_std, alpha=0.3, label='Predicted std')\n",
    "axs[1].plot(bo_disc.space.params, bo_disc.space.target, 'ro')\n",
    "\n",
    "for ax in axs:\n",
    "    ax.grid(True)\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see, that the discrete optimizer is aware that the function is discrete and does not try to predict values between the integers. The continuous optimizer tries to predict values between the integers, despite the fact that these are known.\n",
    "We can also see that the discrete optimizer predicts blocky mean and standard deviations, which is a result of the discrete nature of the function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Mixed-parameter optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def discretized_function(x, y):\n",
    "    y = np.round(y)\n",
    "    return (-1*np.cos(x)**np.abs(y) + -1*np.cos(y)) + 0.1 * (x + y) - 0.01 * (x**2 + y**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Bounded region of parameter space\n",
    "c_pbounds = {'x': (-5, 5), 'y': (-5, 5)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "labels = [\"All-float Optimizer\", \"Typed Optimizer\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "continuous_optimizer = BayesianOptimization(\n",
    "    f=discretized_function,\n",
    "    acquisition_function=acquisition.ExpectedImprovement(xi=0.01, random_state=1),\n",
    "    pbounds=c_pbounds,\n",
    "    verbose=2,\n",
    "    random_state=1,\n",
    ")\n",
    "\n",
    "continuous_optimizer.set_gp_params(kernel=Matern(nu=2.5, length_scale=np.ones(2)))\n",
    "\n",
    "d_pbounds = {'x': (-5, 5), 'y': (-5, 5, int)}\n",
    "discrete_optimizer = BayesianOptimization(\n",
    "    f=discretized_function,\n",
    "    acquisition_function=acquisition.ExpectedImprovement(xi=0.01, random_state=1),\n",
    "    pbounds=d_pbounds,\n",
    "    verbose=2,\n",
    "    random_state=1,\n",
    ")\n",
    "\n",
    "discrete_optimizer.set_gp_params(kernel=Matern(nu=2.5, length_scale=np.ones(2)));"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "====================  All-float Optimizer  ====================\n",
      "\n",
      "|   iter    |  target   |     x     |     y     |\n",
      "-------------------------------------------------\n",
      "| \u001b[39m1        \u001b[39m | \u001b[39m0.03061  \u001b[39m | \u001b[39m-0.829779\u001b[39m | \u001b[39m2.2032449\u001b[39m |\n",
      "| \u001b[39m2        \u001b[39m | \u001b[39m-0.6535  \u001b[39m | \u001b[39m-4.998856\u001b[39m | \u001b[39m-1.976674\u001b[39m |\n",
      "| \u001b[35m3        \u001b[39m | \u001b[35m0.8025   \u001b[39m | \u001b[35m-0.829779\u001b[39m | \u001b[35m2.6549696\u001b[39m |\n",
      "| \u001b[35m4        \u001b[39m | \u001b[35m0.9203   \u001b[39m | \u001b[35m-0.981065\u001b[39m | \u001b[35m2.6644394\u001b[39m |\n",
      "| \u001b[35m5        \u001b[39m | \u001b[35m1.008    \u001b[39m | \u001b[35m-1.652553\u001b[39m | \u001b[35m2.7133425\u001b[39m |\n",
      "| \u001b[39m6        \u001b[39m | \u001b[39m0.9926   \u001b[39m | \u001b[39m-1.119714\u001b[39m | \u001b[39m2.8358733\u001b[39m |\n",
      "| \u001b[35m7        \u001b[39m | \u001b[35m1.322    \u001b[39m | \u001b[35m-2.418942\u001b[39m | \u001b[35m3.4600371\u001b[39m |\n",
      "| \u001b[39m8        \u001b[39m | \u001b[39m-0.5063  \u001b[39m | \u001b[39m-3.092074\u001b[39m | \u001b[39m3.7368226\u001b[39m |\n",
      "| \u001b[39m9        \u001b[39m | \u001b[39m-0.6432  \u001b[39m | \u001b[39m-4.089558\u001b[39m | \u001b[39m-0.560384\u001b[39m |\n",
      "| \u001b[39m10       \u001b[39m | \u001b[39m1.267    \u001b[39m | \u001b[39m-2.360726\u001b[39m | \u001b[39m3.3725022\u001b[39m |\n",
      "| \u001b[39m11       \u001b[39m | \u001b[39m0.4649   \u001b[39m | \u001b[39m-2.247113\u001b[39m | \u001b[39m3.7419056\u001b[39m |\n",
      "| \u001b[39m12       \u001b[39m | \u001b[39m1.0      \u001b[39m | \u001b[39m-1.740988\u001b[39m | \u001b[39m3.4854116\u001b[39m |\n",
      "| \u001b[39m13       \u001b[39m | \u001b[39m0.986    \u001b[39m | \u001b[39m1.2164322\u001b[39m | \u001b[39m4.4938459\u001b[39m |\n",
      "| \u001b[39m14       \u001b[39m | \u001b[39m-2.27    \u001b[39m | \u001b[39m-2.213867\u001b[39m | \u001b[39m0.3585570\u001b[39m |\n",
      "| \u001b[39m15       \u001b[39m | \u001b[39m-1.853   \u001b[39m | \u001b[39m1.7935035\u001b[39m | \u001b[39m-0.377351\u001b[39m |\n",
      "=================================================\n",
      "Max: 1.321554535694256\n",
      "\n",
      "\n",
      "====================  Typed Optimizer  ====================\n",
      "\n",
      "|   iter    |  target   |     x     |     y     |\n",
      "-------------------------------------------------\n",
      "| \u001b[39m1        \u001b[39m | \u001b[39m0.8025   \u001b[39m | \u001b[39m-0.829779\u001b[39m | \u001b[39m3        \u001b[39m |\n",
      "| \u001b[39m2        \u001b[39m | \u001b[39m-2.75    \u001b[39m | \u001b[39m-4.998856\u001b[39m | \u001b[39m0        \u001b[39m |\n",
      "| \u001b[39m3        \u001b[39m | \u001b[39m0.8007   \u001b[39m | \u001b[39m-0.827713\u001b[39m | \u001b[39m3        \u001b[39m |\n",
      "| \u001b[39m4        \u001b[39m | \u001b[39m-0.749   \u001b[39m | \u001b[39m2.2682240\u001b[39m | \u001b[39m-5       \u001b[39m |\n",
      "| \u001b[39m5        \u001b[39m | \u001b[39m0.3718   \u001b[39m | \u001b[39m-2.339072\u001b[39m | \u001b[39m4        \u001b[39m |\n",
      "| \u001b[39m6        \u001b[39m | \u001b[39m0.2146   \u001b[39m | \u001b[39m4.9971028\u001b[39m | \u001b[39m5        \u001b[39m |\n",
      "| \u001b[39m7        \u001b[39m | \u001b[39m0.7473   \u001b[39m | \u001b[39m4.9970839\u001b[39m | \u001b[39m2        \u001b[39m |\n",
      "| \u001b[35m8        \u001b[39m | \u001b[35m0.8275   \u001b[39m | \u001b[35m4.9986856\u001b[39m | \u001b[35m-3       \u001b[39m |\n",
      "| \u001b[39m9        \u001b[39m | \u001b[39m0.3464   \u001b[39m | \u001b[39m4.9987136\u001b[39m | \u001b[39m-2       \u001b[39m |\n",
      "| \u001b[39m10       \u001b[39m | \u001b[39m-0.7852  \u001b[39m | \u001b[39m4.9892216\u001b[39m | \u001b[39m-5       \u001b[39m |\n",
      "| \u001b[39m11       \u001b[39m | \u001b[39m-0.6627  \u001b[39m | \u001b[39m-4.999635\u001b[39m | \u001b[39m-4       \u001b[39m |\n",
      "| \u001b[39m12       \u001b[39m | \u001b[39m-0.1697  \u001b[39m | \u001b[39m-4.992664\u001b[39m | \u001b[39m-3       \u001b[39m |\n",
      "| \u001b[35m13       \u001b[39m | \u001b[35m1.428    \u001b[39m | \u001b[35m4.9950290\u001b[39m | \u001b[35m3        \u001b[39m |\n",
      "| \u001b[39m14       \u001b[39m | \u001b[39m1.137    \u001b[39m | \u001b[39m4.9970984\u001b[39m | \u001b[39m4        \u001b[39m |\n",
      "| \u001b[35m15       \u001b[39m | \u001b[35m1.641    \u001b[39m | \u001b[35m4.0889271\u001b[39m | \u001b[35m3        \u001b[39m |\n",
      "=================================================\n",
      "Max: 1.6407143853831352\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for lbl, optimizer in zip(labels, [continuous_optimizer, discrete_optimizer]):\n",
    "    print(f\"====================  {lbl}  ====================\\n\")\n",
    "    optimizer.maximize(\n",
    "        init_points=2,\n",
    "        n_iter=13\n",
    "    )\n",
    "    print(f\"Max: {optimizer.max['target']}\\n\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x = np.linspace(c_pbounds['x'][0], c_pbounds['x'][1], 1000)\n",
    "y = np.linspace(c_pbounds['y'][0], c_pbounds['y'][1], 1000)\n",
    "\n",
    "X, Y = np.meshgrid(x, y)\n",
    "\n",
    "Z = discretized_function(X, Y)\n",
    "\n",
    "params = [{'x': x_i, 'y': y_j} for y_j in y for x_i in x]\n",
    "array_params = [continuous_optimizer._space.params_to_array(p) for p in params]\n",
    "c_pred = continuous_optimizer._gp.predict(array_params).reshape(X.shape)\n",
    "d_pred = discrete_optimizer._gp.predict(array_params).reshape(X.shape)\n",
    "\n",
    "vmin = np.min([np.min(Z), np.min(c_pred), np.min(d_pred)])\n",
    "vmax = np.max([np.max(Z), np.max(c_pred), np.max(d_pred)])\n",
    "\n",
    "fig, axs = plt.subplots(1, 3)\n",
    "\n",
    "axs[0].set_title('Actual function')\n",
    "axs[0].contourf(X, Y, Z, cmap=plt.cm.coolwarm, vmin=vmin, vmax=vmax)\n",
    "\n",
    "\n",
    "axs[1].set_title(labels[0])\n",
    "axs[1].contourf(X, Y, c_pred, cmap=plt.cm.coolwarm, vmin=vmin, vmax=vmax)\n",
    "axs[1].scatter(continuous_optimizer._space.params[:,0], continuous_optimizer._space.params[:,1], c='k')\n",
    "\n",
    "axs[2].set_title(labels[1])\n",
    "axs[2].contourf(X, Y, d_pred, cmap=plt.cm.coolwarm, vmin=vmin, vmax=vmax)\n",
    "axs[2].scatter(discrete_optimizer._space.params[:,0], discrete_optimizer._space.params[:,1], c='k')\n",
    "\n",
    "def make_plot_fancy(ax: plt.Axes):\n",
    "    ax.set_aspect(\"equal\")\n",
    "    ax.set_xlabel('x (float)')\n",
    "    ax.set_xticks([-5.0, -2.5, 0., 2.5, 5.0])\n",
    "    ax.set_ylabel('y (int)')\n",
    "    ax.set_yticks([-4, -2, 0, 2, 4])\n",
    "\n",
    "for ax in axs:\n",
    "    make_plot_fancy(ax)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Categorical variables\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also handle categorical variables! This is done under-the-hood by constructing parameters in a one-hot-encoding representation, with a transformation in the kernel rounding to the nearest one-hot representation. If you want to use this, you can specify a collection of strings as options.\n",
    "\n",
    "NB: As internally, the categorical variables are within a range of `[0, 1]` and the GP used for BO is by default isotropic, you might want to ensure your other features are similarly scaled to a range of `[0, 1]` or use an anisotropic GP."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f1(x1, x2):\n",
    "    return -1*(x1 - np.sqrt(x1**2 + x2**2) * np.cos(np.sqrt(x1**2 + x2**2))**2 + 0.5 * np.sqrt(x1**2 + x2**2))\n",
    "\n",
    "def f2(x1, x2):\n",
    "    return -1*(x2 - np.sqrt(x1**2 + x2**2) * np.sin(np.sqrt(x1**2 + x2**2))**2 + 0.5 * np.sqrt(x1**2 + x2**2))\n",
    "\n",
    "def SPIRAL(x1, x2, k):\n",
    "    \"\"\"cf Ladislav-Luksan\n",
    "    \"\"\"\n",
    "    if k=='1':\n",
    "        return f1(10 * x1, 10 * x2)\n",
    "    elif k=='2':\n",
    "        return f2(10 * x1, 10 * x2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|   iter    |  target   |    x1     |    x2     |     k     |\n",
      "-------------------------------------------------------------\n",
      "| \u001b[39m1        \u001b[39m | \u001b[39m-2.052   \u001b[39m | \u001b[39m-0.165955\u001b[39m | \u001b[39m0.4406489\u001b[39m | \u001b[39m2        \u001b[39m |\n",
      "| \u001b[35m2        \u001b[39m | \u001b[35m13.49    \u001b[39m | \u001b[35m-0.743751\u001b[39m | \u001b[35m0.9980810\u001b[39m | \u001b[35m1        \u001b[39m |\n",
      "| \u001b[39m3        \u001b[39m | \u001b[39m-14.49   \u001b[39m | \u001b[39m-0.743433\u001b[39m | \u001b[39m0.9709879\u001b[39m | \u001b[39m2        \u001b[39m |\n",
      "| \u001b[39m4        \u001b[39m | \u001b[39m-13.33   \u001b[39m | \u001b[39m0.9950794\u001b[39m | \u001b[39m-0.352913\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "| \u001b[39m5        \u001b[39m | \u001b[39m9.674    \u001b[39m | \u001b[39m0.5436849\u001b[39m | \u001b[39m-0.574376\u001b[39m | \u001b[39m2        \u001b[39m |\n",
      "| \u001b[39m6        \u001b[39m | \u001b[39m9.498    \u001b[39m | \u001b[39m-0.218693\u001b[39m | \u001b[39m-0.709177\u001b[39m | \u001b[39m2        \u001b[39m |\n",
      "| \u001b[39m7        \u001b[39m | \u001b[39m11.43    \u001b[39m | \u001b[39m-0.918642\u001b[39m | \u001b[39m-0.648372\u001b[39m | \u001b[39m2        \u001b[39m |\n",
      "| \u001b[39m8        \u001b[39m | \u001b[39m0.4882   \u001b[39m | \u001b[39m-0.218182\u001b[39m | \u001b[39m-0.012177\u001b[39m | \u001b[39m2        \u001b[39m |\n",
      "| \u001b[39m9        \u001b[39m | \u001b[39m7.542    \u001b[39m | \u001b[39m-0.787692\u001b[39m | \u001b[39m0.3452580\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "| \u001b[39m10       \u001b[39m | \u001b[39m-2.161   \u001b[39m | \u001b[39m0.1392349\u001b[39m | \u001b[39m-0.125728\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "| \u001b[39m11       \u001b[39m | \u001b[39m-0.8336  \u001b[39m | \u001b[39m0.1206357\u001b[39m | \u001b[39m-0.543264\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "| \u001b[39m12       \u001b[39m | \u001b[39m-8.413   \u001b[39m | \u001b[39m0.4981209\u001b[39m | \u001b[39m0.6434939\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "| \u001b[39m13       \u001b[39m | \u001b[39m6.372    \u001b[39m | \u001b[39m0.0587256\u001b[39m | \u001b[39m-0.892371\u001b[39m | \u001b[39m2        \u001b[39m |\n",
      "| \u001b[39m14       \u001b[39m | \u001b[39m-12.71   \u001b[39m | \u001b[39m0.7529885\u001b[39m | \u001b[39m-0.780621\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "| \u001b[39m15       \u001b[39m | \u001b[39m-1.521   \u001b[39m | \u001b[39m0.4118274\u001b[39m | \u001b[39m-0.517960\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "| \u001b[39m16       \u001b[39m | \u001b[39m11.88    \u001b[39m | \u001b[39m-0.755390\u001b[39m | \u001b[39m-0.533137\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "| \u001b[39m17       \u001b[39m | \u001b[39m0.6373   \u001b[39m | \u001b[39m0.2249733\u001b[39m | \u001b[39m-0.053787\u001b[39m | \u001b[39m2        \u001b[39m |\n",
      "| \u001b[39m18       \u001b[39m | \u001b[39m2.154    \u001b[39m | \u001b[39m0.0583506\u001b[39m | \u001b[39m0.6550869\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "| \u001b[35m19       \u001b[39m | \u001b[35m13.69    \u001b[39m | \u001b[35m-0.741717\u001b[39m | \u001b[35m-0.820073\u001b[39m | \u001b[35m2        \u001b[39m |\n",
      "| \u001b[39m20       \u001b[39m | \u001b[39m1.615    \u001b[39m | \u001b[39m-0.663312\u001b[39m | \u001b[39m-0.905925\u001b[39m | \u001b[39m1        \u001b[39m |\n",
      "=============================================================\n"
     ]
    }
   ],
   "source": [
    "pbounds = {'x1': (-1, 1), 'x2': (-1, 1), 'k': ('1', '2')}\n",
    "\n",
    "categorical_optimizer = BayesianOptimization(\n",
    "    f=SPIRAL,\n",
    "    acquisition_function=acquisition.ExpectedImprovement(1e-2),\n",
    "    pbounds=pbounds,\n",
    "    verbose=2,\n",
    "    random_state=1,\n",
    ")\n",
    "discrete_optimizer.set_gp_params(alpha=1e-3)\n",
    "\n",
    "categorical_optimizer.maximize(\n",
    "        init_points=2,\n",
    "        n_iter=18,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "res = categorical_optimizer._space.res()\n",
    "k1 = np.array([[p['params']['x1'], p['params']['x2']] for p in res if p['params']['k']=='1'])\n",
    "k2 = np.array([[p['params']['x1'], p['params']['x2']] for p in res if p['params']['k']=='2'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = np.linspace(pbounds['x1'][0], pbounds['x1'][1], 1000)\n",
    "x2 = np.linspace(pbounds['x2'][0], pbounds['x2'][1], 1000)\n",
    "\n",
    "X1, X2 = np.meshgrid(x1, x2)\n",
    "Z1 = SPIRAL(X1, X2, '1')\n",
    "Z2 = SPIRAL(X1, X2, '2')\n",
    "\n",
    "fig, axs = plt.subplots(1, 2)\n",
    "\n",
    "vmin = np.min([np.min(Z1), np.min(Z2)])\n",
    "vmax = np.max([np.max(Z1), np.max(Z2)])\n",
    "\n",
    "axs[0].contourf(X1, X2, Z1, vmin=vmin, vmax=vmax)\n",
    "axs[0].set_aspect(\"equal\")\n",
    "axs[0].scatter(k1[:,0], k1[:,1], c='k')\n",
    "axs[1].contourf(X1, X2, Z2, vmin=vmin, vmax=vmax)\n",
    "axs[1].scatter(k2[:,0], k2[:,1], c='k')\n",
    "axs[1].set_aspect(\"equal\")\n",
    "axs[0].set_title('k=1')\n",
    "axs[1].set_title('k=2')\n",
    "fig.tight_layout()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Use in ML"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A typical usecase for integer and categorical parameters is optimizing the hyperparameters of a machine learning model. Below you can find an example where the hyperparameters of an SVM are optimized."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|   iter    |  target   |  kernel   |  log10_C  |\n",
      "-------------------------------------------------\n",
      "| \u001b[39m1        \u001b[39m | \u001b[39m-0.2361  \u001b[39m | \u001b[39mpoly2    \u001b[39m | \u001b[39m0.9943696\u001b[39m |\n",
      "| \u001b[39m2        \u001b[39m | \u001b[39m-0.2864  \u001b[39m | \u001b[39mrbf      \u001b[39m | \u001b[39m-0.999771\u001b[39m |\n",
      "| \u001b[39m3        \u001b[39m | \u001b[39m-0.2625  \u001b[39m | \u001b[39mpoly3    \u001b[39m | \u001b[39m0.7449728\u001b[39m |\n",
      "| \u001b[35m4        \u001b[39m | \u001b[35m-0.2361  \u001b[39m | \u001b[35mpoly2    \u001b[39m | \u001b[35m0.9944598\u001b[39m |\n",
      "| \u001b[39m5        \u001b[39m | \u001b[39m-0.298   \u001b[39m | \u001b[39mpoly3    \u001b[39m | \u001b[39m-0.999625\u001b[39m |\n",
      "| \u001b[35m6        \u001b[39m | \u001b[35m-0.2361  \u001b[39m | \u001b[35mpoly2    \u001b[39m | \u001b[35m0.9945010\u001b[39m |\n",
      "| \u001b[35m7        \u001b[39m | \u001b[35m-0.2152  \u001b[39m | \u001b[35mrbf      \u001b[39m | \u001b[35m0.9928960\u001b[39m |\n",
      "| \u001b[39m8        \u001b[39m | \u001b[39m-0.2153  \u001b[39m | \u001b[39mrbf      \u001b[39m | \u001b[39m0.9917667\u001b[39m |\n",
      "| \u001b[39m9        \u001b[39m | \u001b[39m-0.2362  \u001b[39m | \u001b[39mpoly2    \u001b[39m | \u001b[39m0.9897298\u001b[39m |\n",
      "| \u001b[39m10       \u001b[39m | \u001b[39m-0.2362  \u001b[39m | \u001b[39mpoly2    \u001b[39m | \u001b[39m0.9874217\u001b[39m |\n",
      "=================================================\n"
     ]
    }
   ],
   "source": [
    "from sklearn.datasets import load_breast_cancer\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import log_loss\n",
    "from sklearn.model_selection import train_test_split\n",
    "from bayes_opt import BayesianOptimization\n",
    "\n",
    "data = load_breast_cancer()\n",
    "X_train, y_train = data['data'], data['target']\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.2, random_state=1)\n",
    "kernels = ['rbf', 'poly']\n",
    "\n",
    "def f_target(kernel, log10_C):\n",
    "    if kernel == 'poly2':\n",
    "        kernel = 'poly'\n",
    "        degree = 2\n",
    "    elif kernel == 'poly3':\n",
    "        kernel = 'poly'\n",
    "        degree = 3\n",
    "    elif kernel == 'rbf':\n",
    "        degree = 3 # not used, equal to default\n",
    "\n",
    "    C = 10**log10_C\n",
    "\n",
    "    model = SVC(C=C, kernel=kernel, degree=degree, probability=True, random_state=1)\n",
    "    model.fit(X_train, y_train)\n",
    "\n",
    "    # Package looks for maximum, so we return -1 * log_loss\n",
    "    loss = -1 * log_loss(y_val, model.predict_proba(X_val))\n",
    "    return loss\n",
    "\n",
    "\n",
    "params_svm ={\n",
    "    'kernel': ['rbf', 'poly2', 'poly3'],\n",
    "    'log10_C':(-1, +1),\n",
    "}\n",
    "\n",
    "optimizer = BayesianOptimization(\n",
    "    f_target,\n",
    "    params_svm,\n",
    "    random_state=1,\n",
    "    verbose=2\n",
    ")\n",
    "\n",
    "kernel = Matern(nu=2.5, length_scale=np.ones(optimizer.space.dim))\n",
    "discrete_optimizer.set_gp_params(kernel=kernel)\n",
    "optimizer.maximize(init_points=2, n_iter=8)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Defining your own Parameter\n",
    "\n",
    "Maybe you want to optimize over another form of parameters, which does not align with `float`, `int` or categorical. For this purpose, you can create your own, custom parameter. A simple example is a parameter that is discrete, but still admits a distance representation (like an integer) while not being uniformly spaced.\n",
    "\n",
    "However, you can go further even and encode constraints and even symmetries in your parameter. Let's consider the problem of finding a triangle which maximizes an area given its sides $a, b, c$ with a constraint that the perimeter is fixed, i.e. $a + b + c=s$.\n",
    "\n",
    "We will create a parameter that encodes such a triangle, and via it's kernel transform ensures that the sides sum to the required length $s$. As you might expect, the solution to this problem is an equilateral triangle, i.e. $a=b=c=s/3$.\n",
    "\n",
    "To define the parameter, we need to subclass `BayesParameter` and define a few important functions/properties.\n",
    "\n",
    "- `is_continuous` is a property which denotes whether a parameter is continuous. When optimizing the acquisition function, non-continuous parameters will not be optimized using gradient-based methods, but only via random sampling.\n",
    "- `random_sample` is a function that samples randomly from the space of the parameter.\n",
    "- `to_float` transforms the canonical representation of a parameter into float values for the target space to store. There is a one-to-one correspondence between valid float representations produced by this function and canonical representations of the parameter. This function is most important when working with parameters that use a non-numeric canonical representation, such as categorical parameters.\n",
    "- `to_param` performs the inverse of `to_float`: Given a float-based representation, it creates a canonical representation. This function should perform binning whenever appropriate, e.g. in the case of the `IntParameter`, this function would round any float values supplied to it.\n",
    "- `kernel_transform` is the most important function of the Parameter and defines how to represent a value in the kernel space. In contrast to `to_float`, this function expects both the input, as well as the output to be float-representations of the value.\n",
    "- `to_string` produces a stringified version of the parameter, which allows users to define custom pretty-print rules for ththe ScreenLogger use.\n",
    "- `dim` is a property which defines the dimensionality of the parameter. In most cases, this will be 1, but e.g. for categorical parameters it is equivalent to the cardinality of the category space.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bayes_opt.logger import ScreenLogger\n",
    "from bayes_opt.parameter import BayesParameter\n",
    "from bayes_opt.event import Events\n",
    "from bayes_opt.util import ensure_rng\n",
    "\n",
    "\n",
    "class FixedPerimeterTriangleParameter(BayesParameter):\n",
    "    def __init__(self, name: str, bounds, perimeter) -> None:\n",
    "        super().__init__(name, bounds)\n",
    "        self.perimeter = perimeter\n",
    "\n",
    "    @property\n",
    "    def is_continuous(self):\n",
    "        return True\n",
    "    \n",
    "    def random_sample(self, n_samples: int, random_state):\n",
    "        random_state = ensure_rng(random_state)\n",
    "        samples = []\n",
    "        while len(samples) < n_samples:\n",
    "            samples_ = random_state.dirichlet(np.ones(3), n_samples)\n",
    "            samples_ = samples_ * self.perimeter # scale samples by perimeter\n",
    "\n",
    "            samples_ = samples_[np.all((self.bounds[:, 0] <= samples_) & (samples_ <= self.bounds[:, 1]), axis=-1)]\n",
    "            samples.extend(np.atleast_2d(samples_))\n",
    "        samples = np.array(samples[:n_samples])\n",
    "        return samples\n",
    "    \n",
    "    def to_float(self, value):\n",
    "        return value\n",
    "    \n",
    "    def to_param(self, value):\n",
    "        return value * self.perimeter / sum(value)\n",
    "\n",
    "    def kernel_transform(self, value):\n",
    "        return value * self.perimeter / np.sum(value, axis=-1, keepdims=True)\n",
    "\n",
    "    def to_string(self, value, str_len: int) -> str:\n",
    "        len_each = (str_len - 2) // 3\n",
    "        str_ = '|'.join([f\"{float(np.round(value[i], 4))}\"[:len_each] for i in range(3)])\n",
    "        return str_.ljust(str_len)\n",
    "\n",
    "    @property\n",
    "    def dim(self):\n",
    "        return 3 # as we have three float values, each representing the length of one side.\n",
    "\n",
    "def area_of_triangle(sides):\n",
    "    a, b, c = sides\n",
    "    s = np.sum(sides, axis=-1) # perimeter\n",
    "    A = np.sqrt(s * (s-a) * (s-b) * (s-c))\n",
    "    return A\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|      iter       |     target      |      sides      |\n",
      "-------------------------------------------------------\n",
      "| \u001b[39m1              \u001b[39m | \u001b[39m0.4572         \u001b[39m | \u001b[39m0.29|0.70|0.00 \u001b[39m |\n",
      "| \u001b[35m2              \u001b[39m | \u001b[35m0.5096         \u001b[39m | \u001b[35m0.58|0.25|0.15 \u001b[39m |\n",
      "| \u001b[39m3              \u001b[39m | \u001b[39m0.5081         \u001b[39m | \u001b[39m0.58|0.25|0.15 \u001b[39m |\n",
      "| \u001b[35m4              \u001b[39m | \u001b[35m0.5386         \u001b[39m | \u001b[35m0.44|0.28|0.26 \u001b[39m |\n",
      "| \u001b[39m5              \u001b[39m | \u001b[39m0.5279         \u001b[39m | \u001b[39m0.38|0.14|0.47 \u001b[39m |\n",
      "| \u001b[39m6              \u001b[39m | \u001b[39m0.5328         \u001b[39m | \u001b[39m0.18|0.36|0.45 \u001b[39m |\n",
      "| \u001b[39m7              \u001b[39m | \u001b[39m0.4366         \u001b[39m | \u001b[39m0.02|0.22|0.74 \u001b[39m |\n",
      "| \u001b[39m8              \u001b[39m | \u001b[39m0.4868         \u001b[39m | \u001b[39m0.00|0.61|0.37 \u001b[39m |\n",
      "| \u001b[39m9              \u001b[39m | \u001b[39m0.4977         \u001b[39m | \u001b[39m0.56|0.01|0.42 \u001b[39m |\n",
      "| \u001b[35m10             \u001b[39m | \u001b[35m0.5418         \u001b[39m | \u001b[35m0.29|0.40|0.30 \u001b[39m |\n",
      "| \u001b[39m11             \u001b[39m | \u001b[39m0.3361         \u001b[39m | \u001b[39m0.06|0.87|0.06 \u001b[39m |\n",
      "| \u001b[39m12             \u001b[39m | \u001b[39m0.06468        \u001b[39m | \u001b[39m0.99|0.00|0.00 \u001b[39m |\n",
      "| \u001b[39m13             \u001b[39m | \u001b[39m0.01589        \u001b[39m | \u001b[39m0.0|0.00|0.99  \u001b[39m |\n",
      "| \u001b[39m14             \u001b[39m | \u001b[39m0.4999         \u001b[39m | \u001b[39m0.21|0.16|0.61 \u001b[39m |\n",
      "| \u001b[39m15             \u001b[39m | \u001b[39m0.499          \u001b[39m | \u001b[39m0.53|0.46|0.00 \u001b[39m |\n",
      "| \u001b[39m16             \u001b[39m | \u001b[39m0.4937         \u001b[39m | \u001b[39m0.00|0.41|0.58 \u001b[39m |\n",
      "| \u001b[39m17             \u001b[39m | \u001b[39m0.5233         \u001b[39m | \u001b[39m0.33|0.51|0.14 \u001b[39m |\n",
      "| \u001b[39m18             \u001b[39m | \u001b[39m0.5204         \u001b[39m | \u001b[39m0.17|0.54|0.28 \u001b[39m |\n",
      "| \u001b[39m19             \u001b[39m | \u001b[39m0.5235         \u001b[39m | \u001b[39m0.51|0.15|0.32 \u001b[39m |\n",
      "| \u001b[39m20             \u001b[39m | \u001b[39m0.5412         \u001b[39m | \u001b[39m0.31|0.27|0.41 \u001b[39m |\n",
      "| \u001b[39m21             \u001b[39m | \u001b[39m0.4946         \u001b[39m | \u001b[39m0.41|0.00|0.57 \u001b[39m |\n",
      "| \u001b[39m22             \u001b[39m | \u001b[39m0.5355         \u001b[39m | \u001b[39m0.41|0.39|0.19 \u001b[39m |\n",
      "| \u001b[35m23             \u001b[39m | \u001b[35m0.5442         \u001b[39m | \u001b[35m0.35|0.32|0.32 \u001b[39m |\n",
      "| \u001b[39m24             \u001b[39m | \u001b[39m0.5192         \u001b[39m | \u001b[39m0.16|0.28|0.54 \u001b[39m |\n",
      "| \u001b[39m25             \u001b[39m | \u001b[39m0.5401         \u001b[39m | \u001b[39m0.39|0.23|0.36 \u001b[39m |\n",
      "=======================================================\n"
     ]
    }
   ],
   "source": [
    "param = FixedPerimeterTriangleParameter(\n",
    "    name='sides',\n",
    "    bounds=np.array([[0., 1.], [0., 1.], [0., 1.]]),\n",
    "    perimeter=1.\n",
    ")\n",
    "\n",
    "pbounds = {'sides': param}\n",
    "optimizer = BayesianOptimization(\n",
    "    area_of_triangle,\n",
    "    pbounds,\n",
    "    random_state=1,\n",
    ")\n",
    "\n",
    "# Increase the cell size to accommodate the three float values\n",
    "logger = ScreenLogger(verbose=2, is_constrained=False)\n",
    "logger._default_cell_size = 15\n",
    "\n",
    "for e in [Events.OPTIMIZATION_START, Events.OPTIMIZATION_STEP, Events.OPTIMIZATION_END]:\n",
    "    optimizer.subscribe(e, logger)\n",
    "\n",
    "optimizer.maximize(init_points=2, n_iter=23)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This seems to work decently well, but we can improve it significantly if we consider the symmetries inherent in the problem: This problem is permutation invariant, i.e. we do not care which side specifically is denoted as $a$, $b$ or $c$. Instead, we can, without loss of generality, decide that the shortest side will always be denoted as $a$, and the longest always as $c$. If we enhance our kernel transform with this symmetry, the performance improves significantly. This can be easily done by sub-classing the previously created triangle parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|      iter       |     target      |      sides      |\n",
      "-------------------------------------------------------\n",
      "| \u001b[39m1              \u001b[39m | \u001b[39m0.4572         \u001b[39m | \u001b[39m0.00|0.29|0.70 \u001b[39m |\n",
      "| \u001b[35m2              \u001b[39m | \u001b[35m0.5096         \u001b[39m | \u001b[35m0.15|0.25|0.58 \u001b[39m |\n",
      "| \u001b[39m3              \u001b[39m | \u001b[39m0.498          \u001b[39m | \u001b[39m0.06|0.33|0.60 \u001b[39m |\n",
      "| \u001b[35m4              \u001b[39m | \u001b[35m0.5097         \u001b[39m | \u001b[35m0.13|0.27|0.58 \u001b[39m |\n",
      "| \u001b[35m5              \u001b[39m | \u001b[35m0.5358         \u001b[39m | \u001b[35m0.19|0.36|0.43 \u001b[39m |\n",
      "| \u001b[35m6              \u001b[39m | \u001b[35m0.5443         \u001b[39m | \u001b[35m0.33|0.33|0.33 \u001b[39m |\n",
      "| \u001b[39m7              \u001b[39m | \u001b[39m0.5405         \u001b[39m | \u001b[39m0.28|0.28|0.42 \u001b[39m |\n",
      "| \u001b[39m8              \u001b[39m | \u001b[39m0.5034         \u001b[39m | \u001b[39m0.01|0.49|0.49 \u001b[39m |\n",
      "| \u001b[39m9              \u001b[39m | \u001b[39m0.4977         \u001b[39m | \u001b[39m0.01|0.42|0.56 \u001b[39m |\n",
      "| \u001b[39m10             \u001b[39m | \u001b[39m0.5427         \u001b[39m | \u001b[39m0.27|0.36|0.36 \u001b[39m |\n",
      "=======================================================\n"
     ]
    }
   ],
   "source": [
    "class SortingFixedPerimeterTriangleParameter(FixedPerimeterTriangleParameter):\n",
    "    def __init__(self, name: str, bounds, perimeter) -> None:\n",
    "        super().__init__(name, bounds, perimeter)\n",
    "\n",
    "    def to_param(self, value):\n",
    "        value = np.sort(value, axis=-1)\n",
    "        return super().to_param(value)\n",
    "\n",
    "    def kernel_transform(self, value):\n",
    "        value = np.sort(value, axis=-1)\n",
    "        return super().kernel_transform(value)\n",
    "\n",
    "param = SortingFixedPerimeterTriangleParameter(\n",
    "    name='sides',\n",
    "    bounds=np.array([[0., 1.], [0., 1.], [0., 1.]]),\n",
    "    perimeter=1.\n",
    ")\n",
    "\n",
    "pbounds = {'sides': param}\n",
    "optimizer = BayesianOptimization(\n",
    "    area_of_triangle,\n",
    "    pbounds,\n",
    "    random_state=1,\n",
    ")\n",
    "\n",
    "logger = ScreenLogger(verbose=2, is_constrained=False)\n",
    "logger._default_cell_size = 15\n",
    "\n",
    "for e in [Events.OPTIMIZATION_START, Events.OPTIMIZATION_STEP, Events.OPTIMIZATION_END]:\n",
    "    optimizer.subscribe(e, logger)\n",
    "\n",
    "optimizer.maximize(init_points=2, n_iter=8)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "bayesian-optimization-tb9vsVm6-py3.9",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
